#include <moveit/move_group_interface/move_group.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>

#include <moveit_msgs/DisplayRobotState.h>
#include <moveit_msgs/DisplayTrajectory.h>

#include <moveit_msgs/AttachedCollisionObject.h>
#include <moveit_msgs/CollisionObject.h>

#include <kinova_driver/kinova_ros_types.h>
#include "ros/ros.h"
#include "std_msgs/String.h"

void chatterCallback(const std_msgs::String::ConstPtr& msg)
{
	ROS_INFO("I heard: [%s]", msg->data.c_str());
  	ros::NodeHandle node_handle;  
  	ros::AsyncSpinner spinner(1);
  	spinner.start();
  	moveit::planning_interface::MoveGroup group("arm");

  	moveit::planning_interface::PlanningSceneInterface planning_scene_interface;  
	ros::Publisher display_publisher = node_handle.advertise<moveit_msgs::DisplayTrajectory>("/move_group/display_planned_path", 1, true);
	moveit_msgs::DisplayTrajectory display_trajectory;

  	ROS_INFO("Reference frame: %s", group.getPlanningFrame().c_str());
  
  	ROS_INFO("Reference frame: %s", group.getEndEffectorLink().c_str());

  	tf::Pose Home;
  	Home.setOrigin(tf::Vector3(0.212322831154, -0.257197618484, 0.509646713734));
  	Home.setRotation(kinova::EulerXYZ2Quaternion(1.63771402836,1.11316478252, 0.134094119072));

  	tf::Pose random_pose;
  	random_pose.setOrigin(tf::Vector3(0, 0,  0.9));
  	random_pose.setRotation(tf::Quaternion(0.68463, -0.22436, 0.68808, 0.086576));

  	geometry_msgs::Pose target_pose1;
  	tf::poseTFToMsg(random_pose, target_pose1);
  	group.setPoseTarget(target_pose1);


  	moveit::planning_interface::MoveGroup::Plan my_plan;
	moveit::planning_interface::MoveItErrorCode success = group.plan(my_plan);

  	group.move();

  	random_pose.setOrigin(tf::Vector3(0.3,0.3,0.5));
  	tf::poseTFToMsg(random_pose, target_pose1);
  	group.setPoseTarget(target_pose1);
  	success = group.plan(my_plan);

  	group.move();
	usleep(10000);
	ros::shutdown();  
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "motion_plan");
  ros::NodeHandle n;
  /* This sleep is ONLY to allow Rviz to come up */
  sleep(10.0);

  ros::Subscriber sub = n.subscribe("chatter", 1000, chatterCallback);
  ros::spin();

  return 0;

}
